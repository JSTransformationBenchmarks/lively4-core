{"type":"Reference","version":"1f9f773398f63fe27727290a4ded37d944ef7899","content":"\"enable aexpr\";\n\nimport Morph from 'src/components/widgets/lively-morph.js';\nimport Engine from 'demos/engery-sim/engine.js';\nimport _ from 'src/external/lodash/lodash.js'\n\nexport default class LivelySimulation extends Morph {\n  \n  // lifecycle\n  initialize() {\n    this.windowTitle = \"LivelySimulationComponent\";\n    lively.html.registerKeys(this);\n    this.reset();\n  }\n  \n  detachedCallback() {\n    const { engine } = this;\n    engine.stop(); \n  }\n  \n  // initialization\n  \n  initializeCells() {\n    const { shadowRoot } = this;\n    const cellsContainer = shadowRoot.querySelector('#cells');\n    const cells = Array.from(this.querySelectorAll('lively-simulation-cell'));\n    cellsContainer.innerHTML = '';\n    _.forEach(cells, cell => cellsContainer.appendChild(cell.cloneNode(true)));\n  }\n  \n  initializeEngine() {\n    const { shadowRoot } = this;\n    const velocity = this.getJSONAttribute('data-velocity') || 1;\n    const cells = Array.from(shadowRoot.querySelectorAll('lively-simulation-cell'));\n    this.engine = new Engine(velocity, cells); \n  }\n  \n  registerController() {\n    const { engine, shadowRoot } = this;\n    const controller = shadowRoot.querySelector('#controller');\n    controller.engine = engine;\n    controller.onAppendCell = () => this.appendCell();\n    controller.onReset = () => this.reset();\n  }\n  \n  // event listener\n  \n  onKeyDown(event) {\n    const { engine } = this;\n    if (this.someCellHasFocus()) return;\n    switch (event.key) {\n      case ' ':\n        engine.toggleStartStop();\n        break;\n      case '+':\n        engine.increaseVelocity();\n        break;\n      case '-':\n        engine.decreaseVelocity();\n        break;\n      case 's':\n        engine.step();\n        break;\n      case 'r':\n        engine.reset();\n        break;\n      case 'a':\n        this.appendCell();\n        break;\n    }\n    event.preventDefault();\n  }\n  \n  async appendCell() {\n    const { engine, shadowRoot } = this;\n    const cell = await (<lively-simulation-cell></lively-simulation-cell>);\n    engine.appendCell(cell);\n    const cells = shadowRoot.querySelector('#cells');\n    cells.appendChild(cell);\n  }\n  \n  reset() {\n    const { engine } = this;\n    if (engine) engine.stop();\n    this.initializeCells();\n    this.initializeEngine();\n    this.registerController();\n  }\n  \n  // helper\n  someCellHasFocus() {\n    const { shadowRoot } = this;\n    const cells = Array.from(shadowRoot.querySelectorAll('lively-simulation-cell'));\n    return _.some(cells, cell => cell.isFocused());\n  }\n\n  /* Lively-specific API */\n\n  livelyPrepareSave() {\n    const { engine: { velocity }, shadowRoot } = this;\n    const cells = shadowRoot.querySelector('#cells');\n    _.forEach(cells.children, cell => cell.livelyPrepareSave());\n    this.innerHTML = cells.innerHTML;\n    this.setJSONAttribute('data-velocity', velocity);\n  }  \n}"}