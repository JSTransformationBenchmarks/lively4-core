{"type":"Reference","version":"444c20e14f42555bd3bf11307d53879eea8f8943","content":"\"enable aexpr\";\n\nimport Morph from 'src/components/widgets/lively-morph.js';\nimport _ from 'src/external/lodash/lodash.js';\n\nconst JSON_INDENT = 2;\n\nexport default class LivelySimulationCell extends Morph {\n  \n  // life cycle\n  initialize() {\n    this.state = {};\n    this.shouldSkip = this.hasAttribute('data-should-skip');\n    this.handleStateTextAreaFocusOut = this.handleStateTextAreaFocusOut.bind(this);\n    this.handleStateTextAreaFocusIn = this.handleStateTextAreaFocusIn.bind(this);\n    this.handleStateTextAreaKeyDown = this.handleStateTextAreaKeyDown.bind(this);\n    this.openError = this.openError.bind(this);\n    this.onPointerMove = this.onPointerMove.bind(this);\n    this.onPointerUp = this.onPointerUp.bind(this);\n    this.bringToFront = this.bringToFront.bind(this);\n    this.handleCellNameInputFocusOut = this.handleCellNameInputFocusOut.bind(this);\n    this.openMenu = this.openMenu.bind(this);\n    this.clone = this.clone.bind(this);\n    this.handleExecutionResult = this.handleExecutionResult.bind(this);\n    this.toggleSkip = this.toggleSkip.bind(this);\n    this.executeSelf = this.executeSelf.bind(this);\n    this.initializeCellNameInput();\n    this.initializeStateTextArea();\n    this.initializeSnippetCodeMirror();\n    this.initializeError();\n    this.initializeTitleBar();\n    this.initializeZIndexHandler();\n    this.initializeContainer();\n  }\n  \n  attachedCallback() {\n    this.registerCellNameUpdater();\n  }\n  \n  detachedCallback() {\n    this.cellNameUpdater.dispose();\n  }\n  \n  // initialize\n  initializeSnippetCodeMirror() {\n    const snippetCodeMirror = this.getSnippetCodeMirror();\n    const snippet = this.getAttribute('data-snippet') || '// Enter simulation code here';\n    snippetCodeMirror.editorLoaded()\n      .then(() => snippetCodeMirror.editor.setOption('lint', false))\n      .then(() => this.setSnippet(snippet));\n  }\n  \n  initializeStateTextArea() {\n    const state = this.getAttribute('data-state') || '{}';\n    this.setState(JSON.parse(state));\n    const stateTextArea = this.getStateTextArea();\n    stateTextArea.style.cssText = this.getAttribute('data-state-style') || '';\n    stateTextArea.addEventListener('focusin', this.handleStateTextAreaFocusIn)\n    stateTextArea.addEventListener('focusout', this.handleStateTextAreaFocusOut);\n    stateTextArea.addEventListener('keydown', this.handleStateTextAreaKeyDown);\n  }\n  \n  initializeCellNameInput() {\n    const name = this.getAttribute('data-name') || 'New Cell';\n    this.setName(name);\n    const cellNameInput = this.getCellNameInput();\n    cellNameInput.addEventListener('focusout', this.handleCellNameInputFocusOut);\n  }\n  \n  initializeError() {\n    const openErrorLink = this.getOpenErrorLink();\n    openErrorLink.addEventListener('click', this.openError);\n  }\n  \n  initializeTitleBar() {\n    const titleBar = this.getTitleBar();\n    titleBar.addEventListener('pointerdown', event => this.startGrabbing(event, false));\n    this.initializeMenuIcon();\n    this.initializeDeleteIcon();\n  }\n  \n  initializeZIndexHandler() {\n    this.addEventListener('click', this.bringToFront);\n  }\n  \n  initializeMenuIcon() {\n    const menuIcon = this.getMenuIcon();\n    menuIcon.addEventListener('click', () => {\n      if (this.menu) {\n        this.menu.remove();\n        this.menu = undefined;\n      } else \n        this.openMenu();\n    });\n  }\n  \n  initializeDeleteIcon() {\n    const deleteIcon = this.getDeleteIcon();\n    deleteIcon.addEventListener('click', () => this.remove());\n  }\n  \n  registerCellNameUpdater() {\n    const cellNameSpan = this.getCellNameSpan();\n    this.cellNameUpdater = aexpr(() => this.getName()).onChange(cellName => cellNameSpan.innerText = cellName);\n  }\n  \n  initializeContainer() {\n    const container = this.getContainer();\n    const { shouldSkip } = this;\n    container.setAttribute('disabled', shouldSkip);\n  }\n  \n  // event listener\n  handleStateTextAreaFocusIn() {\n    const stateTextArea = this.getStateTextArea();\n    if (stateTextArea.value === JSON.stringify(this.state, undefined, JSON_INDENT))\n      stateTextArea.dataset['prevState'] = stateTextArea.value;\n  }\n  \n  handleStateTextAreaFocusOut() {\n    try {\n      const stateTextArea = this.getStateTextArea();\n      const prevState = stateTextArea.dataset['prevState'];\n      this.clearStateError();\n      if (prevState === stateTextArea.value) {\n        this.setState(this.state);\n        return;\n      }\n      const parsed = JSON.parse(stateTextArea.value);\n      this.setState(parsed);\n    } catch ({ message }) {\n      this.setStateError(message);\n    }\n  }\n  \n  handleStateTextAreaKeyDown(event) {\n    const { key } = event;\n    if (key !== 'Tab') return;\n    const stateTextArea = this.getStateTextArea();\n    const indent =  _.join(_.times(JSON_INDENT, _.constant(' ')), '');\n    const selectionStart = stateTextArea.selectionStart;\n    stateTextArea.value = `${stateTextArea.value.substring(0, selectionStart)}${indent}${stateTextArea.value.substring(stateTextArea.selectionEnd)}`;\n    stateTextArea.selectionEnd = selectionStart + JSON_INDENT;\n    event.preventDefault();\n  }\n  \n  onPointerMove(event) {\n    const { clientX, clientY } = event;\n    const { lastMove } = this;\n    this.style.left = `${this.offsetLeft + clientX - lastMove.clientX}px`;\n    this.style.top = `${this.offsetTop + clientY - lastMove.clientY}px`;\n    this.lastMove = _.pick(event, ['clientX', 'clientY']);\n  }\n  \n  onPointerUp() {\n    const { parentElement } = this;\n    parentElement.removeEventListener('pointermove', this.onPointerMove);\n    parentElement.removeEventListener('pointerup', this.onPointerUp);\n  }\n  \n  handleCellNameInputFocusOut() {\n    const { parentElement: simulation } = this;\n    const cellNameProposal = this.getName().length ? this.getName() : 'Unnamed Cell';\n    this.setName(simulation.ensureUniqueCellName(cellNameProposal));\n  }\n  \n  //\n  execute(scope = {}) {\n    const { executeSingle, shouldSkip } = this;\n    const snippet = this.getSnippet();\n    if ((!executeSingle && shouldSkip) || _.isEmpty(snippet.trim())) return Promise.resolve(scope);\n    const codeMirror = this.getSnippetCodeMirror();\n    codeMirror.setDoitContext(scope);\n    const preProcessSnippet = this.preProcessSnippet(snippet, scope);\n    return codeMirror.boundEval(preProcessSnippet).then(this.handleExecutionResult);\n  }\n  \n  handleExecutionResult({ isError, value: error }) {\n    const codeMirror = this.getSnippetCodeMirror();\n    if (isError) {\n      this.setError(error);\n      throw {\n        state: codeMirror.getDoitContext(),\n        error: new Error()\n      };\n    }\n    else this.clearError();\n    return codeMirror.getDoitContext()\n  };\n  \n  preProcessSnippet(snippet, scope) {\n    let processedSnippet = snippet;\n    processedSnippet = this.addLodashImportToSnippet(processedSnippet);\n    processedSnippet = this.addThisBeforeCellIdentifier(processedSnippet, scope);\n    processedSnippet = this.replaceDollarSignWithSelf(processedSnippet);\n    return processedSnippet;\n  }\n  \n  replaceDollarSignWithSelf(snippet) {\n    let processedSnippet = snippet;\n    let match;\n      while ((match = /(?<![.])\\$[.|[|;|\\n]/g.exec(processedSnippet)) != null) {\n        processedSnippet = _.join([\n          processedSnippet.slice(0, match.index),\n          processedSnippet.slice(match.index + 1)\n        ], `this.${this.getNormalizedName()}`);\n      }\n    return processedSnippet;\n  }\n  \n  addThisBeforeCellIdentifier(snippet, scope) {\n    let processedSnippet = snippet;\n    const cellIdRegExps = _.mapValues(scope, (_, cellId) => new RegExp(`(?<![this.])${cellId}`, 'g'));\n    _.forOwn(cellIdRegExps, (regex, cellId) => {\n      let match;\n      while ((match = regex.exec(processedSnippet)) != null) {\n        processedSnippet = _.join([\n          processedSnippet.slice(0, match.index),\n          processedSnippet.slice(match.index)\n        ], 'this.');\n      }\n    });\n    return processedSnippet;\n  }\n  \n  addLodashImportToSnippet(snippet) {\n    return `import _ from 'src/external/lodash/lodash.js';\\n${snippet}`;\n  }\n  \n  isFocused() {\n    const { shadowRoot } = this;\n    const childrenSelectors = ['#snippetCodeMirror', '#stateTextArea', '#cellNameInput'];\n    return _.some(_.map(childrenSelectors, selector => \n                        this.isChildFocused(shadowRoot.querySelector(selector))));\n  }\n  \n  isChildFocused(child, doc) {\n    doc = doc || document;\n    if (doc.activeElement === child) return true;\n    if (doc.activeElement && doc.activeElement.shadowRoot)\n\t\t\treturn this.isChildFocused(child, doc.activeElement.shadowRoot)\n    return false;\n  }\n  \n  openError() {\n    const { error } = this;\n    if (!error) return;\n    // taken from lively.handleError\n    lively.openComponentInWindow(\"lively-error\").then( comp => {\n      comp.stack =  error.stack;\n      comp.parentElement.setAttribute(\"title\",  \"\" + error.message);\n      comp.style.height = \"max-content\";\n      var bounds = comp.getBoundingClientRect()\n      comp.parentElement.style.height = (bounds.height + 20) + \"px\"\n      comp.parentElement.style.width = bounds.width + \"px\"\n    });\n  }\n  \n  parseErrorMessage({ originalErr: { message } }) {\n    if (message.startsWith('workspace')) {\n      const short = message.split(/\\n/)[0];\n      return short.substring(short.split(':', 2).join(':').length + 1);\n    }\n    return message;\n  }\n  \n  startGrabbing(event, initPosition = true) {\n    const { parentElement } = this;\n    parentElement.addEventListener('pointermove', this.onPointerMove);\n    parentElement.addEventListener('pointerup', this.onPointerUp);\n    this.lastMove = _.pick(event, ['clientX', 'clientY']);\n    if (initPosition) {\n      const parentBounds = parentElement.getBoundingClientRect();\n      this.style.top = `${event.clientY - parentBounds.y - this.clientHeight / 2}px`;\n      this.style.left = `${event.clientX - parentBounds.x - this.clientWidth / 2}px`;\n    }\n  }\n  \n  bringToFront() {\n    const { parentElement: simulation } = this;\n    if (!simulation) return;\n    const foregroundCell = simulation.getForegroundCell();\n    if (foregroundCell === this) return;\n    this.style.zIndex = parseInt(foregroundCell.style.zIndex || 1) + 1;\n  }\n  \n  camelize(str) {\n    // https://stackoverflow.com/questions/2970525/converting-any-string-into-camel-case\n    return str.replace(/(?:^\\w|[A-Z]|\\b\\w|\\s+)/g, function(match, index) {\n      if (+match === 0) return \"\"; // or if (/\\s+/.test(match)) for white spaces\n      return index === 0 ? match.toLowerCase() : match.toUpperCase();\n    });\n  }\n  \n  toAlphaNumeric(str) {\n    return str.replace(/\\W/g, '');\n  }\n  \n  openMenu() {\n    const menuIcon = this.getMenuIcon();\n    return Promise.resolve(lively.create('lively-menu'))\n      .then(menu => {\n        this.menu = menu;\n        menu.openOn(createCellMenu(this.clone, this.shouldSkip, this.toggleSkip, this.executeSelf));\n        this.shadowRoot.appendChild(menu);\n        menu.style.top = `${menuIcon.offsetHeight}px`;\n        setTimeout(() => menu.addEventListener(\"click\", () => {\n          menu.remove();\n          this.menu = undefined;\n        }), 0);\n    });\n  }\n  \n  clone(event) {\n    const { parentElement: simulation } = this;\n    simulation.cloneCell(event, this);\n  }\n  \n  toggleSkip() {\n    this.shouldSkip = !this.shouldSkip;\n    const container = this.getContainer();\n    const { shouldSkip } = this;\n    container.setAttribute('disabled', shouldSkip);\n  }\n  \n  executeSelf() {\n    if (this.executeSingle) return;\n    const { parentElement: simulation } = this;\n    this.executeSingle = true;\n    simulation.executeSingleCell(this).finally(() => this.executeSingle = false);\n  }\n  \n  // getter/ setter\n  getNormalizedName() {\n    return this.camelize(this.toAlphaNumeric(this.getName()));\n  }\n  \n  getName() {\n    const input = this.getCellNameInput();\n    return input.value.trim();\n  }\n  \n  setName(name) {\n    const input = this.getCellNameInput();\n    input.value = name;\n  }\n  \n  getState() {\n    return this.state;\n  }\n  \n  setState(state) {\n    this.state = state;\n    const textArea = this.getStateTextArea();\n    if (!this.hasStateTextAreaFocus() && !this.isStateErrorSpanVisible()) \n      textArea.value = JSON.stringify(state, undefined, JSON_INDENT);\n  }\n  \n  getSnippet() {\n    const codeMirror = this.getSnippetCodeMirror();\n    return codeMirror.editor.getValue();  \n  }\n  \n  setSnippet(snippet) {\n    const codeMirror = this.getSnippetCodeMirror();\n    codeMirror.editor.setValue(snippet);\n  }\n  \n  getSnippetCodeMirror() {\n    const { shadowRoot } = this;\n    return shadowRoot.querySelector('#snippetCodeMirror');\n  }\n  \n  getStateTextArea() {\n    const { shadowRoot } = this;\n    return shadowRoot.querySelector('#stateTextArea');\n  }\n  \n  getCellNameInput() {\n    const { shadowRoot } = this;\n    return shadowRoot.querySelector('#cellNameInput');\n  }\n  \n  getOpenErrorLink() {\n    const { shadowRoot } = this;\n    return shadowRoot.querySelector('#openErrorLink');\n  }\n  \n  getErrorMessageDiv() {\n    const { shadowRoot } = this;\n    return shadowRoot.querySelector('#errorMessageDiv');\n  }\n  \n  getErrorContainer() {\n    const { shadowRoot } = this;\n    return shadowRoot.querySelector('#errorContainer');\n  }\n  \n  setError(error) {\n    const errorMessageDiv = this.getErrorMessageDiv();\n    const errorContainer = this.getErrorContainer();\n    this.error = error;\n    errorMessageDiv.innerText = this.parseErrorMessage(error);\n    errorContainer.style.display = 'flex';\n  }\n  \n  clearError() {\n    this.error = undefined;\n    const errorContainer = this.getErrorContainer();\n    errorContainer.style.display = 'none';\n  }\n  \n  hasStateTextAreaFocus() {\n    return this.isChildFocused(this.getStateTextArea());\n  }\n  \n  getStateErrorSpan() {\n    const { shadowRoot } = this;\n    return shadowRoot.querySelector('#stateErrorSpan');\n  }\n  \n  setStateError(error) {\n    const stateErrorSpan = this.getStateErrorSpan();\n    stateErrorSpan.style.display = 'block';\n    stateErrorSpan.innerText = error;\n  }\n  \n  clearStateError() {\n    const stateErrorSpan = this.getStateErrorSpan();\n    stateErrorSpan.style.display = 'none';\n  }\n  \n  isStateErrorSpanVisible() {\n    const stateErrorSpan = this.getStateErrorSpan();\n    return !_.includes(['', 'none'], stateErrorSpan.style.display);\n  }\n  \n  getTitleBar() {\n    const { shadowRoot } = this;\n    return shadowRoot.querySelector('#titleBar'); \n  }\n  \n  getMenuIcon() {\n    const { shadowRoot } = this;\n    return shadowRoot.querySelector('#menuIcon');\n  }\n  \n  getCellNameSpan() {\n    const { shadowRoot } = this;\n    return shadowRoot.querySelector('#cellNameSpan');\n  }\n  \n  getDeleteIcon() {\n    const { shadowRoot } = this;\n    return shadowRoot.querySelector('#deleteIcon');\n  }\n  \n  getContainer() {\n    const { shadowRoot } = this;\n    return shadowRoot.querySelector('#container');\n  }\n  \n  /* Lively-specific API */\n  livelyPrepareSave() {\n    const { state } = this;\n    const stateTextArea = this.getStateTextArea();\n    this.setAttribute('data-name', this.getName());\n    this.setAttribute('data-state', JSON.stringify(state));\n    this.setAttribute('data-snippet', this.getSnippet());\n    this.setAttribute('data-state-style', stateTextArea.style.cssText);\n    if (this.shouldSkip) this.setAttribute('data-should-skip', true);\n    else this.removeAttribute('data-should-skip');\n  }\n}\n\nconst createCellMenu = (clone, shouldSkip, toggleSkip, execute) => [\n  [\n    \"Clone\", \n    clone, \n    \"\", \n    '<i class=\"fa fa-clone\"></i>'\n  ],\n  [\n    shouldSkip ? 'Enable' : 'Skip', \n    toggleSkip,\n    \"\", \n    shouldSkip ? '<i class=\"fa fa-play\"></i>' : '<i class=\"fa fa-forward\"></i>'\n  ],\n  [\n    'Execute', \n    execute,\n    \"\", \n    '<i class=\"fa fa-cogs\"></i>'\n  ]\n]\n"}