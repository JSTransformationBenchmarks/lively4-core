{"type":"Reference","version":"cc57d227d67cbb5a7563a30c492f021500a71a05","content":"\"enable aexpr\";\n\nimport Morph from 'src/components/widgets/lively-morph.js';\n\nexport class Track {\n\n  // events\n  static get events() {\n    if (!self.__events__) {\n      self.__events__ = [];\n    }\n\n    return self.__events__;\n  }\n  static clearE() {\n    this.events.length = 0;\n  }\n  static logE() {}\n\n  // promises\n  static get promises() {\n    if (!self.__promises__) {\n      self.__promises__ = new Set();\n    }\n\n    return self.__promises__;\n  }\n  static update() {}\n  id(object, store, ) {}\n  static pid(prom) {\n    if (!prom) {\n      return;\n    }\n    if (prom instanceof self.Promise || prom instanceof self.OriginalPromise) {\n\n      if (!self.__promise_id__) {\n        self.__promise_id__ = 1;\n      }\n      if (!prom.id) {\n        prom.id = self.__promise_id__++;\n      }\n      return prom.id;\n      \n    }\n    \n    return undefined;\n  }\n  static fid(fn) {\n    if (!fn) {\n      return;\n    }\n    if (fn instanceof Function) {\n\n      if (!self.__function_id__) {\n        self.__function_id__ = 1;\n      }\n      if (!fn.id) {\n        fn.id = self.__function_id__++;\n      }\n      return fn.id;\n      \n    }\n    \n    return undefined;\n  }\n\n}\n\nexport default class PromiseVisualizer extends Morph {\n  get list() {\n    return this.get(\"#promiseList\");\n  }\n  get numEvt() {\n    return this.get(\"#numEvt\");\n  }\n  get numProm() {\n    return this.get(\"#numProm\");\n  }\n  get promiseArea() {\n    return this.get(\"#promiseArea\");\n  }\n\n  async initialize() {\n    this.windowTitle = \"PromiseVisualizer\";\n\n    this.registerButtons();\n    lively.html.registerKeys(this);\n\n    this.throttledUpdate = ((...args) => this.update(...args)).throttle(7000);\n  }\n\n  update() {\n    this.numEvt.innerHTML = Track.events.length;\n    this.numProm.innerHTML = Track.promises.size;\n    this.renderEvents();\n  }\n\n  renderEvents() {\n    this.list.innerHTML = '';\n    this.list.innerHTML = Track.events.map(e => {\n      const msg = e.msg\n        .replace(/new Promise/gm, `<span class=\"Method\">new</span> Promise`)\n        .replace(/Promise\\.([a-zA-Z0-9$_]+)\\(/gm, `Promise.<span class=\"Method\">$1</span>(`)\n        .replace(/(P\\d+)\\.([a-zA-Z0-9$_]+)/gm, `$1.<span class=\"Method\">$2</span>`)\n        .replace(/(P\\d+)/gm, `<span class=\"Promise $1\" onmouseover=\"\nvar parents = lively.allParents(this, undefined, true)\nvar viewer = parents.find(e => e && e.tagName === 'PROMISE-VISUALIZER');\nif (viewer) {\n  viewer.highlightPromise('$1')\n}\n\">$1</span>`);\n\n      const usefulFrame = e.stack.getFrames(2)\n        .filter(f => !f.file || !f.file.includes(\"active-expression-rewriting.js\"))\n        .filter(f => !f.file || !f.file.includes(\"Layers.js\"))\n        .map(f => (f.async ? 'ðŸ¦“' : '')+f.func + '@' + (f.file ? f.file.replace(/.*\\//,\"\") : \"\"))\n        .join(', ');\n      return `<div class=\"eventEntry\">E${e.id}: ${msg} (${usefulFrame})</div>`;\n    }).join('\\n');\n  }\n\n  get highlightPromiseStyle() {\n    return this.get('#highlight-promise');\n  }\n  highlightPromise(pid) {\n    this.highlightPromiseStyle.innerHTML = `\n  #promiseList .Promise.${pid} {\n    background-color: steelblue;\n  }\n`;\n  }\n\n  renderPromises() {\n    this.promiseArea.innerHTML = '';\n    Track.promises.forEach(e => this.promiseArea.innerHTML += `<div>${e}</div>`);\n  }\n\n  // this method is autmatically registered through the ``registerKeys`` method\n  onKeyDown(evt) {\n    lively.notify(\"Key Down!\" + evt.charCode);\n  }\n\n  onClearButton() {\n    Track.clearE();\n    this.update();\n  }\n\n  onUpdateButton() {\n    this.update();\n  }\n\n  /* Lively-specific API */\n\n  // store something that would be lost\n  livelyPrepareSave() {}\n\n  livelyPreMigrate() {\n    // is called on the old object before the migration\n  }\n\n  livelyMigrate(other) {\n    this.update();\n  }\n\n  livelyInspect(contentNode, inspector) {\n    // do nothing\n  }\n\n  async livelyExample() {\n    this.update();\n  }\n\n}"}